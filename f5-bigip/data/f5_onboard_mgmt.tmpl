#!/bin/bash

# Setup console and startup-script logging
LOG_FILE=/var/log/cloud/startup-script.log
[[ -f $LOG_FILE ]] || /usr/bin/touch $LOG_FILE
npipe=/tmp/$$.tmp
/usr/bin/trap "rm -f $npipe" EXIT
/usr/bin/mknod $npipe p
/usr/bin/tee <$npipe -a $LOG_FILE /dev/ttyS0 &
exec 1>&-
exec 1>$npipe
exec 2>&1

# skip startup script if already complete
if [[ -f /config/startup_finished ]]; then
  echo "Onboarding complete, skip startup script"
  exit
fi

mkdir -p  /var/log/cloud /config/cloud /var/config/rest/downloads /var/lib/cloud/icontrollx_installs

### write_files:
# Download or Render BIG-IP Runtime Init Config


# Create runtime configuration on first boot
if [[ ! -f /config/nicswap_finished ]]; then
cat << 'EOF' > /config/cloud/runtime-init-conf.yaml
---
runtime_parameters:
  - name: USER_NAME
    type: static
    value: ${f5_username}
  - name: SSH_KEYS
    type: static
    value: ${ssh_keypair}
EOF

if ${gcp_secret_manager_authentication}; then
   cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: ADMIN_PASS
    type: secret
    secretProvider:
      environment: gcp
      type: SecretsManager
      version: latest
      secretId: ${gcp_secret_name}
EOF
else
   cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: ADMIN_PASS
    type: static
    value: ${f5_password}
EOF
fi

# Add remaining runtime_parameters
cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: GATEWAY_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 0
      ipcalc: first
  - name: NETWORK_BASE_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 0
      ipcalc: base
  - name: NETWORK_MASK_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 0
      ipcalc: bitmask
  - name: MTU_EXTERNAL
    type: url
    value: http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/0/?recursive=true
    query: mtu
    returnType: number
    headers:
      - name: Metadata-Flavor
        value: Google
  - name: GATEWAY_INTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 2
      ipcalc: first
  - name: NETWORK_BASE_INTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 2
      ipcalc: base
  - name: NETWORK_MASK_INTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 2
      ipcalc: bitmask
  - name: MTU_INTERNAL
    type: url
    value: http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/2/?recursive=true
    query: mtu
    returnType: number
    headers:
      - name: Metadata-Flavor
        value: Google
  - name: SELF_IP_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 0
      ipcalc: address
  - name: SELF_IP_INTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 2
      ipcalc: address
  - name: DNS_SERVER
    type: static
    value: ${dns_server}
  - name: DNS_SUFFIX
    type: static
    value: ${dns_suffix}
  - name: NTP_SERVER
    type: static
    value: ${ntp_server}
  - name: TIMEZONE
    type: static
    value: ${timezone}
  - name: HOST_NAME
    type: url
    value: http://169.254.169.254/computeMetadata/v1/instance/name
    headers:
      - name: Metadata-Flavor
        value: Google
  - name: INTERNAL-SUBNETS
    type: static
    value: ${internal_subnets}
  - name: MGMT1
    type: static
    value: ${mgmt_ip_a}
  - name: MGMT2
    type: static
    value: ${mgmt_ip_b}
  - name: PRIVATE_VIP
    type: static
    value: ${private_vip}
  - name: ILB_VIP
    type: static
    value: ${ilb_vip}
  - name: HOSTNAME1
    type: static
    value: ${hostname_a}
  - name: HOSTNAME2
    type: static
    value: ${hostname_b}
pre_onboard_enabled: []
extension_packages:
  install_operations:
    - extensionType: do
      extensionVersion: ${DO_VER}
      extensionUrl: ${DO_URL}
extension_services:
  service_operations:
    - extensionType: do
      type: inline
      value:
        schemaVersion: 1.0.0
        class: Device
        async: true
        label: Onboard BIG-IP standalone
        Common:
          class: Tenant
          dbVars:
            class: DbVariables
            provision.extramb: 1024
            config.allow.rfc3927: enable
            ui.advisory.enabled: true
            ui.advisory.color: blue
            ui.advisory.text: '{{{ HOST_NAME }}}.${dns_suffix}'
          mySystem:
            autoPhonehome: true
            class: System
            hostname: '{{{ HOST_NAME }}}.${dns_suffix}'
          '{{{ USER_NAME }}}':
            class: User
            partitionAccess:
              all-partitions:
                role: admin
            password: '{{{ ADMIN_PASS }}}'
            shell: bash
            userType: regular
            keys:
              - '{{{ SSH_KEYS }}}'
          myDns:
            class: DNS
            nameServers:
              - '{{{ DNS_SERVER }}}'
            search:
              - '{{{ DNS_SUFFIX }}}'
              - f5.com
          myNtp:
            class: NTP
            servers:
              - '{{{ NTP_SERVER }}}'
              - 1.pool.ntp.org
              - 2.pool.ntp.org
            timezone: '{{{ TIMEZONE }}}'
          myProvisioning:
            class: Provision
            ltm: nominal
            asm: nominal
          myLicense:
            class: License
            licenseType: regKey
            regKey: ${license_key}
          vlan_EXTERNAL:
            class: VLAN
            tag: 4094
            mtu: '{{{ MTU_EXTERNAL }}}'
            interfaces:
              - name: '1.0'
                tagged: false
          selfip_EXTERNAL:
            class: SelfIp
            address: '{{{ SELF_IP_EXTERNAL }}}/32'
            vlan: vlan_EXTERNAL
            allowService: default
            trafficGroup: traffic-group-local-only
          vlan_INTERNAL:
            class: VLAN
            tag: 4093
            mtu: '{{{ MTU_INTERNAL }}}'
            interfaces:
              - name: '1.2'
                tagged: false
          selfip_INTERNAL:
            class: SelfIp
            address: '{{{ SELF_IP_INTERNAL }}}/32'
            vlan: vlan_INTERNAL
            allowService: default
            trafficGroup: traffic-group-local-only
          route_EX-GW:
            class: Route
            target: vlan_EXTERNAL
            network: '{{{ GATEWAY_EXTERNAL }}}/32'
            mtu: '{{{ MTU_EXTERNAL }}}'
          route_DEFAULT:
            class: Route
            gw: '{{{ GATEWAY_EXTERNAL }}}'
            network: default
            mtu: '{{{ MTU_EXTERNAL }}}'
          route_INT-GW:
            class: Route
            target: vlan_INTERNAL
            network: '{{{ GATEWAY_INTERNAL }}}/32'
            mtu: '{{{ MTU_INTERNAL }}}'
          route_INTERNAL-SUBNETS:
            class: Route
            gw: '{{{ GATEWAY_INTERNAL }}}'
            network: '{{{ INTERNAL-SUBNETS }}}'
            mtu: '{{{ MTU_INTERNAL }}}'
          configsync:
            class: ConfigSync
            configsyncIp: ${mgmt_ip}
          failoverAddress:
            class: FailoverUnicast
            address: ${mgmt_ip}
          failoverGroup:
            class: DeviceGroup
            type: sync-failover
            members:
              - '{{{ MGMT1 }}}'
              - '{{{ MGMT2 }}}'
            owner: /Common/failoverGroup/members/0
            autoSync: true
            saveOnAutoSync: false
            networkFailover: true
            fullLoadOnSync: false
            asmSync: false
          traffic-group-1:
            class: TrafficGroup
            autoFailbackEnabled: false
            autoFailbackTime: 50
            failoverMethod: ha-order
            haLoadFactor: 1
            haOrder:
              - '{{{ HOSTNAME1 }}}'
              - '{{{ HOSTNAME2 }}}'
          trust:
            class: DeviceTrust
            localUsername: '{{{ USER_NAME }}}'
            localPassword: '{{{ ADMIN_PASS }}}'
            remoteHost: /Common/failoverGroup/members/0
            remoteUsername: '{{{ USER_NAME }}}'
            remotePassword: '{{{ ADMIN_PASS }}}'
post_onboard_enabled:
  - name: add_failover_script_disable_virt_hc
    type: inline
    commands:
    - echo 'tmsh modify ltm virtual virt_EXT-INGRESS-CONTROLLER enabled' >> /config/failover/active
    - echo 'tmsh modify ltm virtual virt_EXT-INGRESS-CONTROLLER disabled' >> /config/failover/standby
    - echo 'tmsh modify ltm virtual virt_INT-INGRESS-CONTROLLER enabled' >> /config/failover/active
    - echo 'tmsh modify ltm virtual virt_INT-INGRESS-CONTROLLER disabled' >> /config/failover/standby
  - name: add_hc_virt_with_irule
    type: inline
    commands:
    - tmsh create ltm virtual-address '{{{ ILB_VIP }}}' traffic-group traffic-group-local-only
    - HOSTNAME=$(tmsh list sys global-setting hostname | sed -n '2p' | awk '{print $2}')
    - '[[ $HOSTNAME  == *"bigip-a"* ]] && tmsh create ltm rule irule_INGRESS-CONTROLLER when HTTP_REQUEST { HTTP::respond 200 content { OK } noserver Connection Close } || echo "F5-BIGIP-B SKIPPED CREATING IRULE"'
    - tmsh create ltm virtual virt_INT-INGRESS-CONTROLLER destination '{{{ ILB_VIP }}}':443 profiles add { tcp http clientssl } rules { irule_INGRESS-CONTROLLER }
    - tmsh create ltm virtual virt_EXT-INGRESS-CONTROLLER destination '{{{ PRIVATE_VIP }}}':443 profiles add { tcp http clientssl } rules { irule_INGRESS-CONTROLLER }
    - '[[ $HOSTNAME == *"bigip-b"* ]] && tmsh modify ltm virtual all disabled || echo "F5-BIGIP-A SKIPPED DISABLING VIRTUAL SERVERS"'
  - name: trigger_failover
    type: inline
    commands:
    # - $(nohup bash /config/failover/tgactive &>/dev/null &)
    # - $(nohup tmsh modify cm device-group failoverGroup devices modify { '{{{ HOSTNAME2 }}}' { set-sync-leader } } &>/dev/null &)
    - tmsh save sys config
EOF
fi

# Create nic_swap script when multi nic on first boot
COMPUTE_BASE_URL="http://metadata.google.internal/computeMetadata/v1"

if [[ ${NIC_COUNT} && ! -f /config/nicswap_finished ]]; then
   cat << 'EOF' >> /config/cloud/nic_swap.sh
   #!/bin/bash
   source /usr/lib/bigstart/bigip-ready-functions
   wait_bigip_ready
   echo "before nic swapping"
   tmsh list sys db provision.1nicautoconfig
   tmsh list sys db provision.managementeth
   echo "after nic swapping"
   bigstart stop tmm
   tmsh modify sys db provision.managementeth value eth1
   tmsh modify sys db provision.1nicautoconfig value disable
   bigstart start tmm
   wait_bigip_ready
   echo "---Mgmt interface setting---"
   tmsh list sys db provision.managementeth
   tmsh list sys db provision.1nicautoconfig
   sed -i "s/iface0=eth0/iface0=eth1/g" /etc/ts/common/image.cfg
   echo "Done changing interface"
   echo "Set TMM networks"
   MGMTADDRESS=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/ip)
   MGMTMASK=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/subnetmask)
   MGMTGATEWAY=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/gateway)
   MGMTMTU=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/mtu)
   MGMTNETWORK=$(/bin/ipcalc -n $MGMTADDRESS $MGMTMASK | cut -d= -f2)
   echo $MGMTADDRESS
   echo $MGMTMASK
   echo $MGMTGATEWAY
   echo $MGMTMTU
   echo $MGMTNETWORK
   tmsh modify sys global-settings gui-setup disabled
   tmsh modify sys global-settings mgmt-dhcp disabled
   tmsh delete sys management-route all
   tmsh delete sys management-ip all
   tmsh create sys management-ip $${MGMTADDRESS}/32
   tmsh create sys management-route mgmt_gw network $${MGMTGATEWAY}/32 type interface mtu $${MGMTMTU}
   tmsh create sys management-route mgmt_net network $${MGMTNETWORK}/$${MGMTMASK} gateway $${MGMTGATEWAY} mtu $${MGMTMTU}
   tmsh create sys management-route default gateway $${MGMTGATEWAY} mtu $${MGMTMTU}
   tmsh modify sys global-settings remote-host add { metadata.google.internal { hostname metadata.google.internal addr 169.254.169.254 } }
   tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { ntp-servers }
   # JeffGiroux - Use GCP metadata server for DNS during onboarding
   tmsh modify sys dns name-servers add { 169.254.169.254 }
   echo -e "${f5_password}\n${f5_password}" | tmsh modify auth password admin; history -d $(history 1)
   # DanielYaba
   tmsh save /sys config
   /usr/bin/touch /config/nicswap_finished
   reboot
EOF
fi

# Create run_runtime_init.sh script on first boot
if [[ ! -f /config/nicswap_finished ]]; then
  cat << 'EOF' >> /config/cloud/run_runtime_init.sh
  #!/bin/bash
  source /usr/lib/bigstart/bigip-ready-functions
  wait_bigip_ready
  for i in {1..30}; do
    curl -fv --retry 1 --connect-timeout 5 -L ${INIT_URL} -o "/var/config/rest/downloads/f5-bigip-runtime-init.gz.run" && break || sleep 10
  done
  bash /var/config/rest/downloads/f5-bigip-runtime-init.gz.run -- '--cloud gcp --skip-verify --skip-toolchain-metadata-sync' 2>&1
  /usr/local/bin/f5-bigip-runtime-init --config-file /config/cloud/runtime-init-conf.yaml --skip-telemetry 2>&1
  /usr/bin/touch /config/startup_finished
EOF
fi

# Run scripts based on number of nics
if ${NIC_COUNT}; then
  if [[ -f /config/nicswap_finished ]]; then
    echo "Running run_runtime_init.sh"
    chmod +x /config/cloud/run_runtime_init.sh
    nohup /config/cloud/run_runtime_init.sh &
  else
    chmod +x /config/cloud/nic_swap.sh
    nohup /config/cloud/nic_swap.sh &
  fi
else
    echo "Running run_runtime_init.sh"
    chmod +x /config/cloud/run_runtime_init.sh
    nohup /config/cloud/run_runtime_init.sh &
fi